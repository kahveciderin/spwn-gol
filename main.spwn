gcel = (_x, _y, pf){
    let x = _x
    let y = _y

    if x < 0{
        x = 16 + x
    }else if x > 15{
        x = x % 16
    }

    if y < 0{
        y = 16 + y
    }else if y > 15{
        y = y % 16
    }

    return pf[16 * y + x]
}

let playfield = [
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]

checks = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]]

while true{
    // $.print("\x1B[2J\x1B[1;1H") // apparently this doesnt work
    let printstr = ""
    let newbuf = []
    for i in ..256{
        if i % 16 == 0{
            printstr += "\n"
        }
        if playfield[i] == 1{
            printstr += "*"
        }else{
            printstr += " "
        }

        let neigh = 0
        for check in checks{
            if gcel(i % 16 + check[0], $.floor(i / 16 + check[1]), playfield) == 1 {
                neigh += 1
            }
        }
        $.append(newbuf, 0)
        if neigh == 3{
            newbuf[i] = 1
        }else if neigh == 2{
            newbuf[i] = playfield[i]
        }
    }
    playfield = newbuf
    $.print(printstr)
}